@using OuterrimAirship.Repositories.Implemented
@inject ISnackbar Snackbar
@inject IRepositoryAsync<Machinery> MachineryRepositoryAsync

<MudDialog>
    <DialogContent>
        @if (Machinery != null)
        {
            <MudForm Model="Machinery" @bind-IsValid="@_success" @bind-Errors="@_errors">
                <MudTextField T="string" @bind-Value="@Machinery.Label"
                              Label="Lable" Required="true" RequiredError="Lable is required!" />
                <MudTextField T="string" @bind-Value="@Machinery.Function"
                              Label="Funktion" Required="true" RequiredError="Funktion is required!"/>
                <MudSelect T="string" @bind-Value="@Machinery.Type"
                           Label="Type" Required="true" RequiredError="Type is required!">
                    @foreach (var state in types)
                    {
                        <MudSelectItem Value="state">@state</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="int" @bind-Value="@Machinery.CompartmentId"
                           Label="Compartment id" Required="true" RequiredError="Compartment ID is required!">
                    @foreach (var item in _compartment)
                    {
                        <MudSelectItem Value="item">@item</MudSelectItem>
                    }
                </MudSelect>
                
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                   Disabled="@(!_success)" Class="ml-auto"
                   OnClick="EditMachinery">@Type</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public Machinery? Machinery { get; set; }
    
    [Parameter]
    public string? Type { get; set; }
    
    [Parameter]
    public IEnumerable<int> CompartmentList
    {
        get => _compartment;
        set => _compartment = new List<int>(value);
    }
    
    public List<int> _compartment { get; private set; } = new List<int>();
    
    private void Cancel() => MudDialog?.Cancel();
    
    private List<string> types = new List<string>()
    {
        "EnergySystem",
        "Weapon",
        "EnvironmentalSystem"
    };

    
    bool _success;
    string[] _errors = [];
    
    

    private async Task EditMachinery()
    {
        if (Type == "Create")
        {
            if (Machinery != null) await MachineryRepositoryAsync.CreateAsync(Machinery);
            Snackbar.Add("Machinery created!", Severity.Success);
            MudDialog?.Close(DialogResult.Ok(true));
        }
        else
        {
            if (Machinery != null) await MachineryRepositoryAsync.UpdateAsync(Machinery);
            Snackbar.Add("Machinery edited!", Severity.Success);
            MudDialog?.Close(DialogResult.Ok(true));
        }
    }
}