@page "/mercenaries"

@inject IDialogService DialogService

@rendermode InteractiveServer

<MudStack>
    <MudGrid Class="w-100" Spacing="10" Justify="Justify.Center">
        @if (Mercenaries != null)
        {
            @foreach (var mercenary in Mercenaries)
            {
                <MudItem lg="3">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@mercenary.FirstName @mercenary.LastName</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default"
                                               OnClick="@(() => EditMercenary(mercenary))"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default"
                                               OnClick="@(() => DeleteMercenary(mercenary))"/>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Color="Color.Surface">Body Skills: @mercenary.BodySkills</MudText>
                            <MudText Color="Color.Surface">Combat Skills: @mercenary.CombatSkills</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
    <MudButton Color="Color.Primary" OnClick="@(() => CreateMercenary(new Mercenary()))">Create new Mercenary</MudButton>
</MudStack>


@code {

    private List<Mercenary>? Mercenaries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Mercenaries = await MercenaryRepositoryAsync.ReadAllAsync();
    }

    private async Task DeleteMercenary(Mercenary mercenary)
    {
        await MercenaryRepositoryAsync.DeleteAsync(mercenary);
        Mercenaries = await MercenaryRepositoryAsync.ReadAllAsync();
    }

    private async Task EditMercenary(Mercenary mercenary)
    {
        var dialog = await DialogService.ShowAsync<DialogEditMercenary>("Edit Mercenary", new DialogParameters()
        {
            { "Mercenary", mercenary },
            { "Type", "Edit"}
        }, new ()
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            FullWidth = true
        });
        var result = await dialog.Result;

        if (result is { Canceled: false }) Mercenaries = await MercenaryRepositoryAsync.ReadAllAsync();
    }

    private async Task CreateMercenary(Mercenary mercenary)
    {
        var dialog = await DialogService.ShowAsync<DialogEditMercenary>("Create Mercenary", new DialogParameters()
        {
            { "Mercenary", mercenary },
            { "Type", "Create"}
        }, new ()
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            FullWidth = true
        });
        var result = await dialog.Result;

        if (result is { Canceled: false }) Mercenaries = await MercenaryRepositoryAsync.ReadAllAsync();
    }
}