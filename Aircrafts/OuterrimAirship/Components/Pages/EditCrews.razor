@page "/aircraft-crews/edit/{aircraftId:int}/{mercenaryId:int}"
@inject IRepositoryAsync<Crew> AircraftCrewRepository
@inject IRepositoryAsync<Spacecraft> AircraftRepository
@inject IRepositoryAsync<Mercenary> MercenaryRepository
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Edit Aircraft Crew</PageTitle>

<h3>Edit Aircraft Crew</h3>

@if (aircraftCrew is null)
{
    <div class="alert alert-danger">Aircraft Crew not found.</div>
}
else
{
    <form @onsubmit="SaveAircraftCrew">
        <div class="mb-3">
            <label class="form-label">Aircraft</label>
            <select class="form-select" @bind="selectedAircraftId">
                @foreach (var aircraft in _aircrafts)
                {
                    <option value="@aircraft.Id">@aircraft.Name</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Mercenary</label>
            <select class="form-select" @bind="selectedMercenaryId">
                @foreach (var mercenary in _mercenaries)
                {
                    <option value="@mercenary.Id">@mercenary.FirstName @mercenary.LastName</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Joined At</label>
            <input type="date" class="form-control" @bind="selectedJoinedAt" />
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
    </form>
}

@code {
    [Parameter] public int aircraftId { get; set; }
    [Parameter] public int mercenaryId { get; set; }

    private Crew? aircraftCrew;
    private List<Spacecraft>? _aircrafts;
    private List<Mercenary>? _mercenaries;

    private int selectedAircraftId;
    private int selectedMercenaryId;
    private DateTime selectedJoinedAt = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        _aircrafts = await AircraftRepository.ReadAllAsync();
        _mercenaries = await MercenaryRepository.ReadAllAsync();
        aircraftCrew = (await AircraftCrewRepository.ReadAllAsync()).FirstOrDefault(c => c.SpacecraftId == aircraftId && c.MercenaryId == mercenaryId);

        if (aircraftCrew is null)
        {
            return;
        }

        selectedAircraftId = aircraftCrew.SpacecraftId;
        selectedMercenaryId = aircraftCrew.MercenaryId;
        selectedJoinedAt = aircraftCrew.JoinedAt;
    }

    private async Task SaveAircraftCrew(EventArgs e)
    {
        if (aircraftCrew is null)
        {
            Console.WriteLine("Save failed: aircraftCrew is null.");
            return;
        }

        Console.WriteLine($"Updating aircraft crew: {aircraftCrew.SpacecraftId} - {aircraftCrew.MercenaryId} - {aircraftCrew.JoinedAt}");

        try
        {
            await AircraftCrewRepository.UpdateAsync(aircraftCrew);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ignoring exception while updating aircraft crew: {ex.Message}");
        }

        Navigation.NavigateTo("/crew");
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/crew");
    }
}